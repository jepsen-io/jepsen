#!/usr/bin/env bash

# "To provide additional docker compose args, set the COMPOSE var. Ex:
# COMPOSE="-f FILE_PATH_HERE"

set -o errexit
set -o pipefail
set -o nounset
# set -o xtrace

ERROR() {
    printf "\e[101m\e[97m[ERROR]\e[49m\e[39m %s\n" "$@"
}

WARNING() {
    printf "\e[101m\e[97m[WARNING]\e[49m\e[39m %s\n" "$@"
}

INFO() {
    printf "\e[104m\e[97m[INFO]\e[49m\e[39m %s\n" "$@"
}

exists() {
    type "$1" > /dev/null 2>&1
}

JEPSEN_ROOT=${JEPSEN_ROOT:-""}

# Change directory to the parent directory of this script. Taken from:
# https://stackoverflow.com/a/246128/3858681
pushd "$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )/.."

HELP=0
INIT_ONLY=0
NODE_COUNT=6
DEV=""
COMPOSE=${COMPOSE:-""}
RUN_AS_DAEMON=0
POSITIONAL=()

while [[ $# -gt 0 ]]
do
    key="$1"

    case $key in
        --help)
            HELP=1
            shift # past argument
            ;;
        --init-only)
            INIT_ONLY=1
            shift # past argument
            ;;
        --dev)
            if [ ! "$JEPSEN_ROOT" ]; then
                JEPSEN_ROOT="$(cd ../ && pwd)"
                export JEPSEN_ROOT
                INFO "JEPSEN_ROOT is not set, defaulting to: $JEPSEN_ROOT"
            fi
            INFO "Running docker compose with dev config"
            DEV="-f docker-compose.dev.yml"
            shift # past argument
            ;;
        --compose)
            COMPOSE="-f $2"
            shift # past argument
            shift # past value
            ;;
        -d|--daemon)
            INFO "Running docker compose as daemon"
            RUN_AS_DAEMON=1
            shift # past argument
            ;;
        -n|--node-count)
            NODE_COUNT=$2
            shift
            shift
            ;;
        *)
            POSITIONAL+=("$1")
            ERROR "unknown option $1"
            shift # past argument
            ;;
    esac
done
if [ "${#POSITIONAL[@]}" -gt 0 ]; then
  set -- "${POSITIONAL[@]}" # restore positional parameters
fi

if [ "${HELP}" -eq 1 ]; then
    echo "Usage: $0 [OPTION]"
    echo "  --help                                                Display this message"
    echo "  --init-only                                           Initializes ssh-keys, but does not call docker-compose"
    echo "  --daemon                                              Runs docker compose in the background"
    echo "  --dev                                                 Mounts dir at host's JEPSEN_ROOT to /jepsen on jepsen-control container, syncing files for development"
    echo "  --compose PATH                                        Path to an additional docker-compose yml config."
    echo "To provide multiple additional docker compose args, set the COMPOSE var directly, with the -f flag. Ex: COMPOSE=\"-f FILE_PATH_HERE -f ANOTHER_PATH\" ./up.sh --dev"
    exit 0
fi

exists ssh-keygen || { ERROR "Please install ssh-keygen (apt-get install openssh-client)"; exit 1; }
exists perl || { ERROR "Please install perl (apt-get install perl)"; exit 1; }

# Generate SSH keys for the control node
if [ ! -f ./secret/node.env ]; then
    INFO "Generating key pair"
    mkdir -p secret
    ssh-keygen -t rsa -N "" -f ./secret/id_rsa

    INFO "Generating ./secret/control.env"
    { echo "# generated by jepsen/docker/up.sh, parsed by jepsen/docker/control/bashrc";
      echo "# NOTE: newline is expressed as ↩";
      echo "SSH_PRIVATE_KEY=$(perl -p -e "s/\n/↩/g" < ./secret/id_rsa)";
      echo "SSH_PUBLIC_KEY=$(cat ./secret/id_rsa.pub)"; } >> ./secret/control.env

    INFO "Generating authorized_keys"
    { echo "# generated by jepsen/docker/up.sh";
      echo "$(cat ./secret/id_rsa.pub)"; } >> ./secret/authorized_keys

    INFO "Generating ./secret/node.env"
    { echo "# generated by jepsen/docker/up.sh, parsed by the \"tutum/debian\" docker image entrypoint script";
      echo "ROOT_PASS=root"; } >> ./secret/node.env
else
    INFO "No need to generate key pair"
fi


## Build dockerfile
bin/build-docker-compose "${NODE_COUNT}"

# Make sure folders referenced in control Dockerfile exist and don't contain leftover files
rm -rf ./control/jepsen
mkdir -p ./control/jepsen/jepsen
# Copy the jepsen directory if we're not mounting the JEPSEN_ROOT
if [ -z "${DEV}" ]; then
    exclude_params=(
        --exclude=./docker
        --exclude=./.git
    )
    case $(uname) in
        Linux)
            exclude_params+=(--exclude-ignore=.gitignore)
            ;;
    esac
    # Dockerfile does not allow `ADD ..`. So we need to copy it here in setup.
    INFO "Copying .. to control/jepsen"
    (
        (cd ..; tar "${exclude_params[@]}" -cf - .)  | tar Cxf ./control/jepsen -
        cp ../jepsen/src/jepsen/store/* ./control/jepsen/jepsen/src/jepsen/store/
    )
fi

if [ "${INIT_ONLY}" -eq 1 ]; then
    exit 0
fi

exists docker ||
    { ERROR "Please install docker (https://docs.docker.com/engine/installation/)";
      exit 1; }

INFO "Running \`docker compose build\`"
# shellcheck disable=SC2086
docker compose --compatibility -p jepsen -f docker-compose.yml ${COMPOSE} ${DEV} build

INFO "Running \`docker compose up\`"
if [ "${RUN_AS_DAEMON}" -eq 1 ]; then
    # shellcheck disable=SC2086
    docker compose --compatibility -p jepsen -f docker-compose.yml ${COMPOSE} ${DEV} up -d
    INFO "All containers started! Run \`docker ps\` to view, and \`bin/console\` to get started."
else
    INFO "Please run \`bin/console\` in another terminal to proceed"
    # shellcheck disable=SC2086
    docker compose --compatibility -p jepsen -f docker-compose.yml ${COMPOSE} ${DEV} up
fi

popd
